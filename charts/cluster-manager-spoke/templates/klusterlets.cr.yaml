# Copyright Contributors to the Open Cluster Management project

{{- $mode := "Singleton" -}}
{{- $agentNamespace := "open-cluster-management-agent" -}}
{{- $klusterletName := "klusterlet" -}}
{{- $klusterletNamespace := $agentNamespace -}}

{{- if .Values.managedKubeconfig }}

{{- $mode = "Singleton" -}}
# add hash suffix to avoid conflict
{{- $klusterletName = printf "klusterlet-hosted-%s" (randAlphaNum 6) -}}
{{- $agentNamespace = $klusterletName -}}
{{- $klusterletNamespace = printf "open-cluster-management-%s" $agentNamespace -}}

apiVersion: v1
kind: Secret
metadata:
  name: external-managed-kubeconfig
  namespace: {{ $agentNamespace }}
type: Opaque
data:
  kubeconfig: {{ .Values.managedKubeconfig }}
---
{{- end }}

# Copyright Contributors to the Open Cluster Management project
apiVersion: v1
kind: Namespace
metadata:
  annotations:
    workload.openshift.io/allowed: "management"
  name: {{ $agentNamespace }}

---

{{- if .Values.hub.kubeConfig }}

apiVersion: v1
kind: Secret
metadata:
  name: bootstrap-hub-kubeconfig
  namespace: {{ $agentNamespace }}
type: Opaque
data:
  kubeconfig: {{ .Values.hub.kubeConfig }}

{{- else }}

apiVersion: batch/v1
kind: Job
metadata:
  name: bootstrap-hub-kubeconfig-generator
  namespace: open-cluster-management
  annotations:
    "helm.sh/hook": post-install,post-upgrade,post-rollback
spec:
  ttlSecondsAfterFinished: 0
  backoffLimit: 3
  template:
    spec:
      serviceAccountName: klusterlet
      automountServiceAccountToken: true
      containers:
      - name: clusteradm
        image: {{ .Values.clusteradm.image }}:{{ default .Chart.AppVersion .Values.bundleVersion.clusteradmImageVersion }}
        imagePullPolicy: Always
        args:
          - /clusteradm
          - get
          - hubconfig
          - --agent-namespace={{ $agentNamespace }}
          - --ca-data-enc={{ .Values.hub.caData | b64enc }}
          - --hub-apiserver={{ .Values.hub.apiServer }}
          - --hub-token={{ .Values.hub.token }}
        securityContext:
          {{- toYaml .Values.clusteradm.securityContext | nindent 10 }}
      restartPolicy: Never

{{- end }}

---

# Test using:
# helm install cluster-manager-spoke  charts/cluster-manager-spoke --set hub.kubeConfig=abc --set clusterName=abc --dry-run=server

{{- $spokeServer := "" }}
{{- with (lookup "v1" "ConfigMap" "kube-public" "cluster-info") }}
  {{ range $c := get (.data.kubeconfig | fromYaml) "clusters" }}
    {{- $spokeServer = dig "cluster" "server" $c.server $c -}}
  {{ end }}
{{- end }}

apiVersion: operator.open-cluster-management.io/v1
kind: Klusterlet
metadata:
  name: {{ $klusterletName }}
spec:
  deployOption:
    mode: {{ $mode }}
  registrationImagePullSpec: {{ .Values.registry }}/registration:{{ default .Chart.AppVersion .Values.bundleVersion.registrationImageVersion }}
  workImagePullSpec: {{ .Values.registry }}/work:{{ default .Chart.AppVersion .Values.bundleVersion.registrationImageVersion }}
  imagePullSpec: {{ .Values.registry}}/registration-operator:{{ default .Chart.AppVersion .Values.bundleVersion.operatorImageVersion}}
  clusterName: {{ required "A valid clusterName entry required!" .Values.clusterMetadata.name }}
  namespace: {{ $klusterletNamespace }}
  {{- if $spokeServer }}
  externalServerURLs:
  - url: {{ $spokeServer }}
  {{- end }}
  registrationConfiguration:
    {{if and .Values.aws.hubClusterArn .Values.aws.managedClusterArn}}
    registrationDriver:
      authType: "awsirsa"
      awsIrsa:
        hubClusterArn: {{ .Values.aws.hubClusterArn }}
        managedClusterArn: {{ .Values.aws.managedClusterArn }}
    {{else}}
    registrationDriver:
      authType: "csr"
    {{end}}
    {{if .Values.registrationFeatures}}
    featureGates:
    {{range .Values.registrationFeatures }}
    - feature: {{ .feature }}
      mode: {{ .mode }}
    {{end}}
    {{end}}
  {{if .Values.workFeatures}}
  workConfiguration:
    featureGates:
    {{range .Values.workFeatures }}
    - feature: {{ .feature }}
      mode: {{ .mode }}
    {{end}}
  {{end}}
    # Uncomment the following configuration lines to add hostAliases for hub api server, 
    # if the server field in your hub cluster kubeconfig is a domain name instead of an ipv4 address.
    # For example, https://xxx.yyy.zzz.
    # This configuration is used for registration-agent and work-agent to communicate with hub api server.
    # hubApiServerHostAlias:
    # ip: "1.2.3.4"
    # hostname: "xxx.yyy.zzz"
